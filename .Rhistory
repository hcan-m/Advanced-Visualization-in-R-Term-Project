## Plot 1
```{r}
ggplot(churn, aes(x = Customer_Age, fill = Gender)) +
geom_histogram(data = iris[,-4], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Gender) + guides(fill = FALSE)
library(GGally)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(cowplot)
library(ggforce)
library(GGally)
churn <- read.csv("Data/churn.csv", sep = ',')
ggplot(churn, aes(x = Customer_Age, fill = Gender)) +
geom_histogram(data = iris[,-4], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Gender) + guides(fill = FALSE)
ggplot(churn, aes(x = Customer_Age, fill = Gender)) +
geom_histogram(data = iris[,-4], fill = "grey", alpha = .5)
ggplot(churn, aes(x = Customer_Age, fill = Gender)) +
geom_histogram(data = churn[,-4], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Gender) + guides(fill = FALSE)
ggplot(churn, aes(x = Credit_Limit, fill = Gender)) +
geom_histogram(data = churn[,-4], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Gender) + guides(fill = FALSE)
ggplot(churn, aes(x = Credit_Limit, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Gender) + guides(fill = FALSE)
ggplot(churn, aes(x = Credit_Limit, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) + guides(fill = FALSE)
ggviolin(churn, x = "Education_Level", y = "Total_Revolving_Bal",
fill = "Education_Level", palette = "jco",
add = "boxplot", add.params = list(fill = "white"))  +
stat_compare_means(method = 'anova') +
stat_compare_means(comparisons = my_comp)
library(ggpubr)
ggviolin(churn, x = "Education_Level", y = "Total_Revolving_Bal",
fill = "Education_Level", palette = "jco",
add = "boxplot", add.params = list(fill = "white"))  +
stat_compare_means(method = 'anova') +
stat_compare_means(comparisons = my_comp)
unique(churn$Education_Level)
my_comp <- list( c("Unknown", "Uneducated"), c("Uneducated", "High School"), c("High School", "College"), c("College", "Graduate"), c("Graduate", "Post-Graduate"), c("Post-Graduate", "Doctorate") )
ggviolin(churn, x = "Education_Level", y = "Total_Revolving_Bal",
fill = "Education_Level", palette = "jco",
add = "boxplot", add.params = list(fill = "white"))  +
stat_compare_means(method = 'anova') +
stat_compare_means(comparisons = my_comp)
is.na(churn)
sum(is.na(churn))
sum(churn=="Unknown")
sum(churn=="Unknown")
colsum(churn=="Unknown")
colSums(churn=="Unknown")
colSums(churn[,c(6,7,8)]=="Unknown")
## I think we should remove those Unknowns
churnN <- churn[churn!="Unknown"]
churn[churn!="Unknown"]
## I think we should remove those Unknowns
churnN <- churn[churn!="Unknown",]
churnN <- read.csv("Data/churn.csv", sep = ',', na.strings = c("NA", "N/A", "Unknown"))
## I think we should remove those Unknowns
is.na(churnN)
## I think we should remove those Unknowns
sum(is.na(churnN))
## I think we should remove those Unknowns
churnNN <- drop_na(churnN)
churnNN$Attrition_Flag
table(churnNN$Attrition_Flag)
#table(churnNN$Attrition_Flag)
table(churn$Attrition_Flag)
table(churnNN$Attrition_Flag)
table(churn$Attrition_Flag)
table(churnNN$Attrition_Flag)
table(churn$Attrition_Flag)
table(churnNN$Attrition_Flag)
table(churn$Attrition_Flag)
table(churn$Attrition_Flag)
```{r}
table(churnNN$Attrition_Flag)
table(churn$Attrition_Flag)[1]
table(churn$Attrition_Flag)[1][1]
table(churn$Attrition_Flag)[1][2]
table(churn$Attrition_Flag)[1]
table(churn$Attrition_Flag)
margin.table(churn$Attrition_Flag)
table(churn$Attrition_Flag)
prop.table(churn$Attrition_Flag)
table(churn$Attrition_Flag)
prop.table(table(churn$Attrition_Flag))
prop.table(table(churnNN$Attrition_Flag))
ggplot(churnNN, aes(x = Credit_Limit, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
unique(churnNN$Education_Level)
my_comp <- list( c("Uneducated", "High School"), c("High School", "College"), c("College", "Graduate"), c("Graduate", "Post-Graduate"), c("Post-Graduate", "Doctorate") )
my_comp <- list( c("Uneducated", "High School"), c("High School", "College"), c("College", "Graduate"), c("Graduate", "Post-Graduate"), c("Post-Graduate", "Doctorate") )
ggviolin(churnNN, x = "Education_Level", y = "Total_Revolving_Bal",
fill = "Education_Level", palette = "jco",
add = "boxplot", add.params = list(fill = "white"))  +
stat_compare_means(method = 'anova') +
stat_compare_means(comparisons = my_comp)
View(spare.time)
# Read database
setwd("X:/kkosc/AdvancedVisualizationR/")
movies <- read.csv('Dane/top250.csv',sep=';',dec=',')
# Read ggplot2 lib
library(ggplot2)
library(dplyr)
# Let's use an example from the previous part.
p2 <- ggplot(movies, aes(x = rank, # Sort by ranking on x axis
y = p10*votes / 100, # Put number of '10's received on y
color = (year > 2000))) + # Movies from XXI century with different color
geom_point() +
labs(y = 'Number of 10s received', x = 'Movie rank')
# Add labels:
p2 + geom_text(aes(label = title))
# Not very useful -- we barely can see antything and the labels do not fit on a plot
# Try to fit labs on the plot
# Use parameters hjust i vjust for positioning
# hjust - horizontal
# vjust - vertical
p2 + geom_text(aes(label = title), hjust = 0, vjust = 0)
p2 + geom_text(aes(label = title), hjust = 0, vjust = 10)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(cowplot)
library(ggforce)
library(GGally)
library(ggpubr)
churn <- read.csv("Data/churn.csv", sep = ',')
churnN <- read.csv("Data/churn.csv", sep = ',', na.strings = c("NA", "N/A", "Unknown"))
colSums(churn[,c(6,7,8)]=="Unknown")
## I think we should remove those Unknowns
churnNN <- drop_na(churnN)
## Drop ClientNum column here
## Make Attrition Flag 1-0
# Set the working directory
setwd('...')
# Read database
spare.time <- read.csv("Data/free_time.csv", sep = ',')
# Read libs
library(tidyverse)
# Basic plot:
ggplot(data = spare.time, aes(x = free_time)) +
geom_histogram()
# Basic plot:
ggplot(data = spare.time, aes(x = Attrition_Flag)) +
geom_histogram()
ggplot(churnNN, aes(x = Attrition_Flag, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Attrition_Flag, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5,stat="count") +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Attrition_Flag, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black",stat="count") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Attrition_Flag, fill = Education_Level), stat="count") +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Attrition_Flag, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
churn <- read.csv("Data/churn.csv", sep = ',')
churnN <- read.csv("Data/churn.csv", sep = ',', na.strings = c("NA", "N/A", "Unknown"))
colSums(churn[,c(6,7,8)]=="Unknown")
## I think we should remove those Unknowns
churnNN <- drop_na(churnN)
## Drop ClientNum column here
## Make Attrition Flag 1-0
prop.table(table(churn$Attrition_Flag))
prop.table(table(churnNN$Attrition_Flag))
churnNN$Attrition_Flag <- ifelse(churnNN$Attrition_Flag=="Attrited Customer", 1, 0)
churnNN$CLIENTNUM <- NULL
ggplot(churnNN, aes(x = Attrition_Flag, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Attrition_Flag, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
summary(churnNN)
churnNN$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1 <- NULL
churnNN$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2 <- NULL
```{r}
summary(churnNN)
churnNN$Attrition_Flag <- ifelse(churnNN$Attrition_Flag=="Attrited Customer", 1, 0)
churn <- read.csv("Data/churn.csv", sep = ',')
churnN <- read.csv("Data/churn.csv", sep = ',', na.strings = c("NA", "N/A", "Unknown"))
churnN <- read.csv("Data/churn.csv", sep = ',', na.strings = c("NA", "N/A", "Unknown"))
## Data Preparation
```{r}
colSums(churn[,c(6,7,8)]=="Unknown")
churnNN <- drop_na(churnN)
summary(churnNN)
churnN <- read.csv("Data/churn.csv", sep = ',', na.strings = c("NA", "N/A", "Unknown"), stringsAsFactors = TRUE)
churnN <- read.csv("Data/churn.csv", sep = ',', na.strings = c("NA", "N/A", "Unknown"), stringsAsFactors = TRUE)
## Data Preparation
```{r}
colSums(churn[,c(6,7,8)]=="Unknown")
churnNN <- drop_na(churnN)
## Drop ClientNum column here
## Make Attrition Flag 1-0
```{r}
prop.table(table(churn$Attrition_Flag))
prop.table(table(churn$Attrition_Flag))
```{r}
prop.table(table(churnNN$Attrition_Flag))
prop.table(table(churnNN$Attrition_Flag))
```{r}
summary(churnNN)
summary(churnN)
churn <- read.csv("Data/churn.csv", sep = ',', stringsAsFactors = TRUE)
churnN <- read.csv("Data/churn.csv", sep = ',', na.strings = c("NA", "N/A", "Unknown"), stringsAsFactors = TRUE)
summary(churn)
summary(mylogit)
mylogit <- glm(Attrition_Flag ~ ., data = churnNN, family = "binomial")
summary(mylogit)
mylogit <- glm(Attrition_Flag ~ ., data = churnNN)
summary(churnNN)
# dropping the columns which is not useful for our analysis
churnNN$CLIENTNUM <- NULL
churnNN$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1 <- NULL
churnNN$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2 <- NULL
```{r}
summary(churnNN)
ggplot(churnNN, aes(x = Attrition_Flag, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
churnNN$Attrition_Flag <- ifelse(churnNN$Attrition_Flag=="Attrited Customer", 1, 0)
churnNN$CLIENTNUM <- NULL
ggplot(churnNN, aes(x = Attrition_Flag, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Credit_Limit, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Income_category, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Income_Category, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
summary(churnNN)
ggplot(churnNN, aes(x = Attrition_Flag, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
### Plot 1
```{r}
ggplot(churnNN, aes(x = Credit_Limit, fill = Education_Level)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
churn <- read.csv("Data/churn.csv", sep = ',', stringsAsFactors = TRUE)
churnN <- read.csv("Data/churn.csv", sep = ',', na.strings = c("NA", "N/A", "Unknown"), stringsAsFactors = TRUE)
colSums(churn[,c(6,7,8)]=="Unknown")
churnNN <- drop_na(churnN)
g))
prop.table(table(churn$Attrition_Flag))
prop.table(table(churnNN$Attrition_Flag))
summary(churn)
# dropping the columns which is not useful for our analysis
churnNN$CLIENTNUM <- NULL
churnNN$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1 <- NULL
churnNN$Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2 <- NULL
```{r}
summary(churnNN)
ggplot(churnNN, aes(x = Credit_Limit, fill = Income_Category)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Education_Level) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Credit_Limit, fill = Income_Category)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Income_Category) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Credit_Limit, fill = Income_Category)) +
geom_histogram(data = churn[,-6], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Income_Category) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Credit_Limit, fill = Income_Category)) +
geom_histogram(data = churn[,-8], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Income_Category) +
guides(fill = FALSE)
churnNN$Income_Category
table(churnNN$Income_Category)
churnNN$Income_Category <- ordered(churnNN$Income_Category, levels = c("Less than $40K", "$40K - $60K", "$60K - $80K", "$80K - $120K", "$120K +"))
ggplot(churnNN, aes(x = Credit_Limit, fill = Income_Category)) +
geom_histogram(data = churn[,-8], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Income_Category) +
guides(fill = FALSE)
table(churnNN$Education_Level)
# Ordering factor from smaller to bigger in order to have it in correct order in plots
churnNN$Income_Category <- ordered(churnNN$Income_Category, levels = c("Less than $40K", "$40K - $60K", "$60K - $80K", "$80K - $120K", "$120K +"))
churnNN$Education_Level <- ordered(churnNN$Education_Level, levels = c("Uneducated", "High School", "College", "Graduate","Post-Graduate",  "Doctorate"))
ggplot(churnNN, aes(x = Credit_Limit, fill = Income_Category)) +
geom_histogram(data = churn[,-8], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Income_Category) +
guides(fill = FALSE)
unique(churnNN$Education_Level)
ggplot(churnNN, aes(x = Credit_Limit, fill = Attrition_Flag)) +
geom_histogram(data = churn[,-1], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Income_Category) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Credit_Limit, fill = Attrition_Flag)) +
geom_histogram(data = churn[,-1], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Attrition_Flag) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Total_Revolving_Bal, fill = Attrition_Flag)) +
geom_histogram(data = churn[,-1], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Attrition_Flag) +
guides(fill = FALSE)
ggplot(churnNN, aes(x = Total_Revolving_Bal, fill = Attrition_Flag)) +
geom_histogram(data = churn[,-1], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Attrition_Flag) +
guides(fill = FALSE)
my_comp <- list( c("Uneducated", "High School"), c("High School", "College"), c("College", "Graduate"), c("Graduate", "Post-Graduate"), c("Post-Graduate", "Doctorate") )
ggviolin(churnNN, x = "Education_Level", y = "Total_Revolving_Bal",
fill = "Education_Level", palette = "jco",
add = "boxplot", add.params = list(fill = "white"))  +
stat_compare_means(method = 'anova') +
stat_compare_means(comparisons = my_comp)
library(heatmaply)
library(plotly)
library(ggcorrplot)
churn_numeric <- select_if(churnNN, is.numeric)
churn_ready_for_corr <- churn_numeric %>%
select(1:15)
library(heatmaply)
library(plotly)
library(ggcorrplot)
churn_numeric <- select_if(churnNN, is.numeric)
churn_ready_for_corr <- churn_numeric %>%
select(1:14)
# Compute correlation coefficients
corr <- churn_ready_for_corr %>%
cor()
# Compute correlation p-values
cor.test.p <- function(x){
FUN <- function(x, y) cor.test(x, y)[["p.value"]]
z <- outer(
colnames(x),
colnames(x),
Vectorize(function(i,j) FUN(x[,i], x[,j]))
)
dimnames(z) <- list(colnames(x), colnames(x))
z
}
p <- cor.test.p(churn_ready_for_corr)
# Create the heatmap
heatmaply_cor(
corr,
node_type = "scatter",
point_size_mat = -log10(p),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation")
)
# Clustering Variables
dropdown(
tags$h3("List of Input"),
pickerInput(inputId = 'xcol',
label = 'X Variable',
choices = names(attrition[, num_vars]),
selected = names(attrition)[[5]],
options = list(`style` = "btn-info")),
pickerInput(inputId = 'ycol',
label = 'Y Variable',
choices = names(attrition[, num_vars]),
selected = names(attrition)[[1]],
options = list(`style` = "btn-warning")),
sliderInput(inputId = 'clusters',
label = 'Desired Cluster Numbers',
value = 3,
min = 1, max = 9),
style = "unite", icon = icon("angle-double-right"),
status = "danger", width = "300px", right = TRUE,
tooltip = tooltipOptions(title = "Click to see inputs!"),
animate = animateOptions(
enter = animations$fading_entrances$fadeInLeftBig,
exit = animations$fading_exits$fadeOutRightBig
)
)
plot(clusterData(),
pch = 20, cex = 3)
# Clustering Variables
clusterData <- churnNN[, c("Credit_Limit", "Total_Revolving_Bal")]
output$plot2 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(clusterData(),
pch = 20, cex = 3)
points(clusters2()$centers, pch = 3, cex = 3, lwd = 3)
})
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(clusterData(),
pch = 20, cex = 3)
plot(clusterData,
pch = 20, cex = 3)
# Clustering Variables
clusterData <- churnNN[, c("Credit_Limit", "Total_Revolving_Bal")]
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(clusterData,
pch = 20, cex = 3)
points(clusters2()$centers, pch = 3, cex = 3, lwd = 3)
# Clustering Variables
clusterData <- churnNN[, c("Credit_Limit", "Total_Revolving_Bal")]
clusters2 <- kmeans(clusterData, 3)
output$plot2 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(clusterData(),
col = clusters2()$cluster,
pch = 20, cex = 3)
points(clusters2()$centers, pch = 3, cex = 3, lwd = 3)
})
# Clustering Variables
clusterData <- churnNN[, c("Credit_Limit", "Total_Revolving_Bal")]
clusters2 <- kmeans(clusterData, 3)
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(clusterData(),
col = clusters2()$cluster,
pch = 20, cex = 3)
# Clustering Variables
clusterData <- churnNN[, c("Credit_Limit", "Total_Revolving_Bal")]
clusters2 <- kmeans(clusterData, 3)
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(clusterData,
col = clusters2()$cluster,
pch = 20, cex = 3)
# Clustering Variables
clusterData <- churnNN[, c("Credit_Limit", "Total_Revolving_Bal")]
clusters2 <- kmeans(clusterData, 3)
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(clusterData,
col = clusters2$cluster,
pch = 20, cex = 3)
points(clusters2()$centers, pch = 3, cex = 3, lwd = 3)
# Clustering Variables
clusterData <- churnNN[, c("Credit_Limit", "Total_Revolving_Bal")]
clusters2 <- kmeans(clusterData, 3)
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(clusterData,
col = clusters2$cluster,
pch = 20, cex = 3)
points(clusters2$centers, pch = 3, cex = 3, lwd = 3)
