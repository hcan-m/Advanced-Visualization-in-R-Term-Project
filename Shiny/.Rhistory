ex2 <- churn_ex %>% count(Card_Category)
ex2<- ex2 %>% plot_ly(labels = ~Card_Category, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Card Category")
ex3 <- churn_ex %>% count(Education_Level)
ex3 <- ex3 %>% plot_ly(labels = ~Education_Level, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Education Level")
ex4 <- churn_ex %>% count(Marital_Status)
ex4 <- ex4 %>% plot_ly(labels = ~Marital_Status, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Marital Status")
fig <- subplot(ex1, ex2,ex3,ex4, nrows = 4,ncol=2, shareX = FALSE)
fig
my_comp <- list( c("Uneducated", "High School"), c("High School", "College"), c("College", "Graduate"), c("Graduate", "Post-Graduate"), c("Post-Graduate", "Doctorate") )
ggviolin(churnNN, x = "Education_Level", y = "Total_Revolving_Bal",
fill = "Education_Level", palette = "jco",
add = "boxplot", add.params = list(fill = "white"))  +
stat_compare_means(method = 'anova') +
stat_compare_means(comparisons = my_comp)
#library(cowplot)
#library(ggforce)
#library(GGally)
library(ggpubr)
library(highcharter)
library(gridExtra)
library(ggpubr)
library(cowplot)
library(ggforce)
library(GGally)
ggplot(data = df,
aes(axis1 = Marital_Status, axis2 = Gender, axis3 = Customer_Age_Ordered,
y = counts)) +
scale_x_discrete(limits = c("Class", "Sex", "Age"), expand = c(.2, .05)) +
xlab("Demographic") +
geom_alluvium(aes(fill = Attrition_Flag)) +
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
theme_minimal() +
ggtitle("passengers on the maiden voyage of the Titanic",
"stratified by demographics and survival")
library(ggalluvial)
ggplot(data = df,
aes(axis1 = Marital_Status, axis2 = Gender, axis3 = Customer_Age_Ordered,
y = counts)) +
scale_x_discrete(limits = c("Class", "Sex", "Age"), expand = c(.2, .05)) +
xlab("Demographic") +
geom_alluvium(aes(fill = Attrition_Flag)) +
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
theme_minimal() +
ggtitle("passengers on the maiden voyage of the Titanic",
"stratified by demographics and survival")
library(readr)  # for read_csv
library(inspectdf) #check NA
library(tidyverse)
library(tidyr)
library(leaflet)
library(plotly)
library(shinydashboard)
library(lubridate)
library(shiny)
library(data.table)
library(mltools)
library(lubridate)
library(flexdashboard)
library(base)
library(ggthemes)
library(highcharter)
library(gridExtra)
library(ggpubr)
library(cowplot)
library(ggforce)
library(GGally)
library(ggalluvial)
churn <- read.csv("https://raw.githubusercontent.com/ozgur-polat/Advanced-Visualization-in-R-Term-Project/main/Data/churn.csv", sep = ',', stringsAsFactors = TRUE)
head(churn)
churnN <- read.csv("https://raw.githubusercontent.com/ozgur-polat/Advanced-Visualization-in-R-Term-Project/main/Data/churn.csv", sep = ',', na.strings = c("NA", "N/A", "Unknown"), stringsAsFactors = TRUE)
head(churnN)
# rename column names by index
names(churnN)[22] <- "NB_mon_1"
names(churnN)[23] <- "NB_mon_2"
str(churnN)
# check missing values
NA1 <- inspect_na(churnN)
NA1
show_plot(NA1)
# remove NA values
churnNN <- drop_na(churnN)
sum(is.na(churnNN))
#After dropping Unknowns we are having very similar distribution and I would say lets drop it in order to have better EDA
prop.table(table(churn$Attrition_Flag))
prop.table(table(churnNN$Attrition_Flag))
# dropping the columns which is not useful for our analysis
churnNN$CLIENTNUM <- NULL
churnNN$NB_mon_1 <- NULL
churnNN$NB_mon_2 <- NULL
summary(churnNN)
str(churn)
# Ordering factor from smaller to bigger in order to have it in correct order in plots
churnNN$Income_Category <- ordered(churnNN$Income_Category, levels = c("Less than $40K", "$40K - $60K", "$60K - $80K", "$80K - $120K", "$120K +"))
churnNN$Education_Level <- ordered(churnNN$Education_Level, levels = c("Uneducated", "High School", "College", "Graduate","Post-Graduate",  "Doctorate"))
rs4 <- churnNN %>%
group_by(Customer_Age,Gender) %>%
summarise(number = length(Customer_Age))
final <- rs4 %>%
arrange(Customer_Age, desc(Gender)) %>%
group_by(Customer_Age) %>%
mutate(label_sum = cumsum(number))
ggplot(data = final, aes(x = factor(Customer_Age), y = number, fill = factor(Gender))) +
geom_bar(na.rm = TRUE, position = "stack", width = 0.7, stat = "identity") +
ggtitle('Gender and age in the sample') +
xlab('Age') +
ylab('Count') +
labs(fill = 'Gender') +
theme_minimal() +
geom_text(aes(label = label_sum), position = position_stack(),
vjust = -.5, color = "black", size = 3.5) +
scale_x_discrete(limits = c('35','36','37','38', '39','40','41','42','43','44','45','46','47','48','49','50','51','52','53'))
# We can also use the `facet_wrap` function to split plot into multiple subplots:
ggplot(data = churnNN, aes(x = Customer_Age, y = Total_Trans_Amt)) +
geom_point() +
geom_smooth() +
facet_wrap(~Education_Level)
churnNN$Customer_Age_Ordered <- case_when(churnNN$Customer_Age > 60 ~ '60+',
between(churnNN$Customer_Age, 20, 30 ) ~ '20-30',
between(churnNN$Customer_Age, 31, 40 ) ~ '31-40',
between(churnNN$Customer_Age, 41, 50 ) ~ '41-50',
between(churnNN$Customer_Age, 51, 60 ) ~ '51-60',
)
# pyramid alternatifi hoca vermis
ggplot(data = churnNN, aes(x = Customer_Age_Ordered, fill = Gender, y = Total_Revolving_Bal)) +
geom_col(position = 'fill')
ggplot(churnNN, aes(x = Customer_Age_Ordered, y = Total_Revolving_Bal, fill = Gender)) +
geom_bar(stat = "identity", width = .6) +
scale_y_continuous(breaks = seq(-15000000, 15000000, 5000000),
labels = paste0(as.character(c(seq(15, 0, -5), seq(5, 15, 5))), "m")) +
labs(title="Email Campaign Funnel") +
theme_tufte() +
theme(plot.title = element_text(hjust = .5), axis.ticks = element_blank()) +
scale_fill_brewer(palette = "Dark2")
#df <- churnNN %>%
#  group_by(Marital_Status,Gender,Customer_Age_Ordered,Attrition_Flag) %>%
#  summarise(counts = n())
#df
#ggplot(data = df,
#       aes(axis1 = Marital_Status, axis2 = Gender, axis3 = Customer_Age_Ordered,
#           y = counts)) +
#  scale_x_discrete(limits = c("Class", "Sex", "Age"), expand = c(.2, .05)) +
#  xlab("Demographic") +
#  geom_alluvium(aes(fill = Attrition_Flag)) +
#  geom_stratum() +
#  geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
#  theme_minimal() +
#  ggtitle("passengers on the maiden voyage of the Titanic",
#          "stratified by demographics and survival")
churn_ex <- subset(churnNN, Attrition_Flag=="Existing Customer")
ex1 <- churn_ex %>% count(Income_Category)
ex1<- ex1 %>% plot_ly(labels = ~Income_Category, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Income Category")
ex2 <- churn_ex %>% count(Card_Category)
ex2<- ex2 %>% plot_ly(labels = ~Card_Category, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Card Category")
ex3 <- churn_ex %>% count(Education_Level)
ex3 <- ex3 %>% plot_ly(labels = ~Education_Level, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Education Level")
ex4 <- churn_ex %>% count(Marital_Status)
ex4 <- ex4 %>% plot_ly(labels = ~Marital_Status, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Marital Status")
at1<- ggplot(data =subset(churnNN, Attrition_Flag=="Attried Customer"), aes(y=Customer_Age,x="", fill=Income_Category)) + geom_bar(stat='identity')+ coord_polar("y", start=0)
at2<-ggplot(data =subset(churnNN, Attrition_Flag=="Attried Customer"), aes(y=Customer_Age,x="", fill=Card_Category)) + geom_bar(stat='identity')+ coord_polar("y", start=0)
at3 <-ggplot(data =subset(churnNN, Attrition_Flag=="Attried Customer"), aes(y=Customer_Age,x="", fill=Marital_Status)) + geom_bar(stat='identity')+ coord_polar("y", start=0)
at4 <- ggplot(data =subset(churnNN, Attrition_Flag=="Attried Customer"), aes(y=Customer_Age,x="", fill=Education_Level)) + geom_bar(stat='identity')+ coord_polar("y", start=0)
grid.arrange(at1,at2,at3,at4, ncol=2,nrow=2)
ex1<- ggplot(data =subset(churnNN, Attrition_Flag=="Existing Customer"), aes(y=Customer_Age,x="", fill=Income_Category)) + geom_bar(stat='identity')+ coord_polar("y", start=0)
ex2<-ggplot(data =subset(churnNN, Attrition_Flag=="Existing Customer"), aes(y=Customer_Age,x="", fill=Card_Category)) + geom_bar(stat='identity')+ coord_polar("y", start=0)
ex3 <-ggplot(data =subset(churnNN, Attrition_Flag=="Existing Customer"), aes(y=Customer_Age,x="", fill=Marital_Status)) + geom_bar(stat='identity')+ coord_polar("y", start=0)
ex4 <- ggplot(data =subset(churnNN, Attrition_Flag=="Existing Customer"), aes(y=Customer_Age,x="", fill=Education_Level)) + geom_bar(stat='identity')+ coord_polar("y", start=0)
ggplot(churnNN, aes(x = Customer_Age_Ordered, y = Total_Revolving_Bal, fill = Gender)) +
geom_bar(stat = "identity", width = .6) +
scale_y_continuous(breaks = seq(-15000000, 15000000, 5000000),
labels = paste0(as.character(c(seq(15, 0, -5), seq(5, 15, 5))), "m")) +
labs(title="Email Campaign Funnel") +
theme_tufte() +
theme(plot.title = element_text(hjust = .5), axis.ticks = element_blank()) +
scale_fill_brewer(palette = "Dark2")
library(readr)  # for read_csv
library(inspectdf) #check NA
library(tidyverse)
library(tidyr)
library(leaflet)
library(plotly)
library(shinydashboard)
library(lubridate)
library(shiny)
library(data.table)
library(mltools)
library(lubridate)
library(flexdashboard)
library(base)
library(ggthemes)
library(highcharter)
library(gridExtra)
library(ggpubr)
library(cowplot)
library(ggforce)
library(GGally)
library(ggalluvial)
churn <- read.csv("https://raw.githubusercontent.com/ozgur-polat/Advanced-Visualization-in-R-Term-Project/main/Data/churn.csv", sep = ',', stringsAsFactors = TRUE)
head(churn)
churnN <- read.csv("https://raw.githubusercontent.com/ozgur-polat/Advanced-Visualization-in-R-Term-Project/main/Data/churn.csv", sep = ',', na.strings = c("NA", "N/A", "Unknown"), stringsAsFactors = TRUE)
head(churnN)
# rename column names by index
names(churnN)[22] <- "NB_mon_1"
names(churnN)[23] <- "NB_mon_2"
str(churnN)
# check missing values
NA1 <- inspect_na(churnN)
NA1
show_plot(NA1)
# remove NA values
churnNN <- drop_na(churnN)
sum(is.na(churnNN))
#After dropping Unknowns we are having very similar distribution and I would say lets drop it in order to have better EDA
prop.table(table(churn$Attrition_Flag))
prop.table(table(churnNN$Attrition_Flag))
# dropping the columns which is not useful for our analysis
churnNN$CLIENTNUM <- NULL
churnNN$NB_mon_1 <- NULL
churnNN$NB_mon_2 <- NULL
summary(churnNN)
str(churn)
# Ordering factor from smaller to bigger in order to have it in correct order in plots
churnNN$Income_Category <- ordered(churnNN$Income_Category, levels = c("Less than $40K", "$40K - $60K", "$60K - $80K", "$80K - $120K", "$120K +"))
churnNN$Education_Level <- ordered(churnNN$Education_Level, levels = c("Uneducated", "High School", "College", "Graduate","Post-Graduate",  "Doctorate"))
# We can also use the `facet_wrap` function to split plot into multiple subplots:
ggplot(data = churnNN, aes(x = Customer_Age, y = Total_Trans_Amt)) +
geom_point() +
geom_smooth() +
facet_wrap(~Education_Level)
churnNN$Customer_Age_Ordered <- case_when(churnNN$Customer_Age > 60 ~ '60+',
between(churnNN$Customer_Age, 20, 30 ) ~ '20-30',
between(churnNN$Customer_Age, 31, 40 ) ~ '31-40',
between(churnNN$Customer_Age, 41, 50 ) ~ '41-50',
between(churnNN$Customer_Age, 51, 60 ) ~ '51-60',
)
my_comp <- list( c("Uneducated", "High School"), c("High School", "College"), c("College", "Graduate"), c("Graduate", "Post-Graduate"), c("Post-Graduate", "Doctorate") )
ggviolin(churnNN, x = "Education_Level", y = "Total_Revolving_Bal",
fill = "Education_Level", palette = "jco",
add = "boxplot", add.params = list(fill = "white"))  +
stat_compare_means(method = 'anova') +
stat_compare_means(comparisons = my_comp)
ggplot(churnNN, aes(x = Total_Revolving_Bal, fill = Attrition_Flag)) +
geom_histogram(data = churnNN[,-1], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Attrition_Flag) +
guides(fill = FALSE) +
xlab("Total Revolving Balance on the Credit Card")+
ylab("Number of Customers")
ggplot(churnNN, aes(x = Credit_Limit, fill = Income_Category)) +
geom_histogram(data = churnNN[,-8], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Income_Category) +
guides(fill = FALSE) +
xlab("Credit Limit on the Credit Card")
sct <- ggplot(churnNN,aes(Customer_Age,Credit_Limit))+ geom_point() +geom_smooth()
sct+theme_gdocs()
my_comp <- list( c("Uneducated", "High School"), c("High School", "College"), c("College", "Graduate"), c("Graduate", "Post-Graduate"), c("Post-Graduate", "Doctorate") )
ggviolin(churnNN, x = "Education_Level", y = "Total_Revolving_Bal",
fill = "Education_Level", palette = "jco",
add = "boxplot", add.params = list(fill = "white"))  +
stat_compare_means(method = 'anova') +
stat_compare_means(comparisons = my_comp)
churn_ex <- subset(churnNN, Attrition_Flag=="Existing Customer")
ex1 <- churn_ex %>% count(Income_Category)
ex1<- ex1 %>% plot_ly(labels = ~Income_Category, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Income Category")
ex2 <- churn_ex %>% count(Card_Category)
ex2<- ex2 %>% plot_ly(labels = ~Card_Category, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Card Category")
ex3 <- churn_ex %>% count(Education_Level)
ex3 <- ex3 %>% plot_ly(labels = ~Education_Level, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Education Level")
ex4 <- churn_ex %>% count(Marital_Status)
ex4 <- ex4 %>% plot_ly(labels = ~Marital_Status, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Marital Status")
ex1
ex2
ex3
ex4
churn_at <- subset(churnNN, Attrition_Flag=="Attrited Customer")
at1 <- churn_at %>% count(Income_Category)
at1<- at1 %>% plot_ly(labels = ~Income_Category, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Income Category")
at2 <- churn_at %>% count(Card_Category)
at2<- at2 %>% plot_ly(labels = ~Card_Category, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Card Category")
at3 <- churn_at %>% count(Education_Level)
at3 <- at3 %>% plot_ly(labels = ~Education_Level, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Education Level")
at4 <- churn_at %>% count(Marital_Status)
at4 <- at4 %>% plot_ly(labels = ~Marital_Status, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Marital Status")
fig1 <- subplot(at1,at2,at3,at4, nrows = 4)
fig1
library(plotly)
fig2 <- churnNN %>% count(Marital_Status)
fig2 %>% plot_ly(labels = ~Marital_Status, values = ~n)  %>% add_pie(hole = 0.60)
p1 <- ggplot(churnNN, aes(x = Income_Category)) +
geom_bar(aes(fill = Attrition_Flag)) +
geom_text(aes(y = ..count.. -200,
label = paste0(round(prop.table(..count..),4) * 100, '%')),
stat = 'count',
position = position_dodge(.1),
size = 3)
ggplotly(p1)
library(readr)  # for read_csv
library(inspectdf) #check NA
library(tidyverse)
library(tidyr)
library(leaflet)
library(plotly)
library(shinydashboard)
library(lubridate)
library(shiny)
library(data.table)
library(mltools)
library(lubridate)
library(flexdashboard)
library(base)
library(ggthemes)
library(highcharter)
library(gridExtra)
library(ggpubr)
library(cowplot)
library(ggforce)
library(GGally)
library(ggalluvial)
churn <- read.csv("https://raw.githubusercontent.com/ozgur-polat/Advanced-Visualization-in-R-Term-Project/main/Data/churn.csv", sep = ',', stringsAsFactors = TRUE)
head(churn)
churnN <- read.csv("https://raw.githubusercontent.com/ozgur-polat/Advanced-Visualization-in-R-Term-Project/main/Data/churn.csv", sep = ',', na.strings = c("NA", "N/A", "Unknown"), stringsAsFactors = TRUE)
head(churnN)
# rename column names by index
names(churnN)[22] <- "NB_mon_1"
names(churnN)[23] <- "NB_mon_2"
str(churnN)
# check missing values
NA1 <- inspect_na(churnN)
NA1
show_plot(NA1)
# remove NA values
churnNN <- drop_na(churnN)
sum(is.na(churnNN))
#After dropping Unknowns we are having very similar distribution and I would say lets drop it in order to have better EDA
prop.table(table(churn$Attrition_Flag))
prop.table(table(churnNN$Attrition_Flag))
# dropping the columns which is not useful for our analysis
churnNN$CLIENTNUM <- NULL
churnNN$NB_mon_1 <- NULL
churnNN$NB_mon_2 <- NULL
summary(churnNN)
str(churn)
# Ordering factor from smaller to bigger in order to have it in correct order in plots
churnNN$Income_Category <- ordered(churnNN$Income_Category, levels = c("Less than $40K", "$40K - $60K", "$60K - $80K", "$80K - $120K", "$120K +"))
churnNN$Education_Level <- ordered(churnNN$Education_Level, levels = c("Uneducated", "High School", "College", "Graduate","Post-Graduate",  "Doctorate"))
# We can also use the `facet_wrap` function to split plot into multiple subplots:
ggplot(data = churnNN, aes(x = Customer_Age, y = Total_Trans_Amt)) +
geom_point() +
geom_smooth() +
facet_wrap(~Education_Level)
churnNN$Customer_Age_Ordered <- case_when(churnNN$Customer_Age > 60 ~ '60+',
between(churnNN$Customer_Age, 20, 30 ) ~ '20-30',
between(churnNN$Customer_Age, 31, 40 ) ~ '31-40',
between(churnNN$Customer_Age, 41, 50 ) ~ '41-50',
between(churnNN$Customer_Age, 51, 60 ) ~ '51-60',
)
ggplot(churnNN, aes(x = Income_Category)) +
geom_bar(aes(fill = Attrition_Flag)) +
geom_text(aes(y = ..count.. -200,
label = paste0(round(prop.table(..count..),4) * 100, '%')),
stat = 'count',
position = position_dodge(.1),
size = 3)+scale_fill_manual(values=c("#1f77b4", "#ff7f0e"))
p1<- ggplot(churnNN, aes(x = Income_Category)) +
geom_bar(aes(fill = Attrition_Flag)) +
geom_text(aes(y = ..count.. -200,
label = paste0(round(prop.table(..count..),4) * 100, '%')),
stat = 'count',
position = position_dodge(.1),
size = 3)+scale_fill_manual(values=c("#1f77b4", "#ff7f0e"))
ggplotly(p1)
ggplot(churnNN, aes(x = Credit_Limit, fill = Income_Category)) +
geom_histogram(data = churnNN[,-8], fill = "grey", alpha = .5) +
geom_histogram(colour = "black") +
facet_wrap(~ Income_Category) +
guides(fill = FALSE) +
xlab("Credit Limit on the Credit Card")
p4<-ggplot(churnNN, aes(x = Marital_Status)) +
geom_bar(aes(fill = Attrition_Flag)) +
geom_text(aes(y = ..count.. -200,
label = paste0(round(prop.table(..count..),4) * 100, '%')),
stat = 'count',
position = position_dodge(.1),
size = 3)+scale_fill_manual(values=c("#ff7f0e","#1f77b4"))
ggplotly(p4)
p1<- ggplot(churnNN, aes(x = Income_Category)) +
geom_bar(aes(fill = Attrition_Flag)) +
geom_text(aes(y = ..count.. -200,
label = paste0(round(prop.table(..count..),4) * 100, '%')),
stat = 'count',
position = position_dodge(.1),
size = 3)+scale_fill_manual(values=c("#ff7f0e","#1f77b4"))
ggplotly(p1)
ex <- ggplot(data =subset(churnNN, Attrition_Flag=="Existing Customer"), aes(x=Customer_Age,fill=Gender)) + geom_bar()+theme_gdocs() + ggtitle("Distrubiton of Age among Existing Customers")+ theme(title = element_text(size=5))+scale_fill_manual(values=c("#ff7f0e","#1f77b4"))
ggplotly(ex)
at <- ggplot(data =subset(churnNN, Attrition_Flag=="Attrited Customer"), aes(x=Customer_Age,fill=Gender)) + geom_bar()+ theme_gdocs() + ggtitle("Distrubiton of Age among Attrited Customers")+ theme(title = element_text(size=5))+scale_fill_manual(values=c("#ff7f0e","#1f77b4"))
ggplotly(at)
churn_ex <- subset(churnNN, Attrition_Flag=="Existing Customer")
ex1
ex1 <- churn_ex %>% count(Income_Category)
ex1
ggplot(churn_ex, aes(x="", y=n, fill=Income_Category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(churn_ex, aes(x="", y=n, fill=Income_Category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(ex1, aes(x="", y=n, fill=Income_Category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
# Compute percentages
ex1$fraction = ex1$n / sum(ex1$n)
ex1
# Compute the bottom of each rectangle
ex1$ymin = c(0, head(ex1$ymax, n=-1))
# Compute the cumulative percentages (top of each rectangle)
ex1$ymax = cumsum(ex1$fraction)
# Make the plot
ggplot(ex1, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=Income_Category)) +
geom_rect() +
coord_polar(theta="y") + # Try to remove that to understand how the chart is built initially
xlim(c(2, 4))
ex2 <- ex1 %>%
arrange(desc(Income_Category)) %>%
mutate(prop = n / sum(ex1$n) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
ex2
churn_ex <- subset(churnNN, Attrition_Flag=="Existing Customer")
ex1 <- churn_ex %>% count(Income_Category)
ex2 <- ex1 %>%
arrange(desc(Income_Category)) %>%
mutate(prop = n / sum(ex1$n) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
ex2
ggplot(ex2, aes(x="", y=prop, fill=Income_Category)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = Income_Category), color = "white", size=6) +
scale_fill_brewer(palette="Set1")
ggplot(ex2, aes(x="", y=prop, fill=Income_Category)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = Income_Category), color = "white", size=2) +
scale_fill_brewer(palette="Set1")
ggplot(ex2, aes(x="", y=prop, fill=Income_Category)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = Income_Category), color = "white", size=4) +
scale_fill_brewer(palette="Set1")
ggplot(ex2, aes(x="", y=prop, fill=Income_Category)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = Income_Category), color = "white", size=4)
ggplot(ex2, aes(x="", y=prop, fill=Income_Category)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
ggplot(ex2, aes(x="", y=prop, fill=Income_Category)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
ggplot(ex1, aes(x="", y=n, fill=Income_Category)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ex1<- ex1 %>% plot_ly(labels = ~Income_Category, values = ~n)  %>% add_pie(hole = 0.60) %>% layout(title="Income #Category")
ex1
fig <- plot_ly()
fig <- fig %>% add_pie(data = count(churnNN, Income_Category), labels = ~Income_Category, values = ~n,
name = "Income Category", domain = list(row = 0, column = 0))
fig <- fig %>% add_pie(data = count(churnNN, Card_Category), labels = ~Card_Category, values = ~n,
name = "Card Category", domain = list(row = 0, column = 1))
fig <- fig %>% add_pie(data = count(churnNN, Education_Level), labels = ~Education_Level, values = ~n,
name = "Education Level", domain = list(row = 1, column = 0))
fig <- fig %>% add_pie(data = count(churnNN, Marital_Status), labels = ~Marital_Status, values = ~n,
name = "Marital Status", domain = list(row = 1, column = 1))
fig <- fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=2, columns=2),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
library(gridExtra)
library(grid)
churn_ex <- subset(churnNN, Attrition_Flag=="Existing Customer")
fig <- plot_ly()
fig <- fig %>% add_pie(data = count(churn_ex, Income_Category), labels = ~Income_Category, values = ~n,
name = "Income Category", domain = list(row = 0, column = 0))
fig <- fig %>% add_pie(data = count(churn_ex, Card_Category), labels = ~Card_Category, values = ~n,
name = "Card Category", domain = list(row = 0, column = 1))
fig <- fig %>% add_pie(data = count(churn_ex, Education_Level), labels = ~Education_Level, values = ~n,
name = "Education Level", domain = list(row = 1, column = 0))
fig <- fig %>% add_pie(data = count(churn_ex, Marital_Status), labels = ~Marital_Status, values = ~n,
name = "Marital Status", domain = list(row = 1, column = 1))
fig <- fig %>% layout(title = "Pie Charts with Subplots", showlegend = F,
grid=list(rows=2, columns=2),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
library(shiny); runApp('~/GitHub/Advanced-Visualization-in-R-Term-Project/ShinyApp.R')
install.packages("shinyWidgets")
install.packages("shinyWidgets")
library(shinyWidgets)
runApp('~/GitHub/Advanced-Visualization-in-R-Term-Project/ShinyApp.R')
