###########################################################
#               Advanced Visualization in R               #
#                The ggplot2 package, p. 5                #
#            Piotr Cwiakowski,  Krzysztof Kosc            #
#                       WNE UW 2018                       #
###########################################################

library(ggplot2)
library(dplyr)
library(scales)
library(RColorBrewer)

#setwd('...')

# Read data
rs <- read.csv2('Data/responses.csv', header = TRUE, sep = ",", dec = ".") 

# 1. Introduction

# Barplots are ones among the most basic types of plots in data visualization 
# packages. Despite the fact that they are not the most efficient in terms of 
# data presentation (one could often get away with just a nice table), 
# they are very often used in numerous works. They are also a great opportunity
# to continue our journey with ggplot2.

# 2. Basic plot

# In our examples we will use the 'responses' database which contains results 
# of a student poll in which students' hobbies, world-views, etc are investigated. 
# Let's start with the age distribution in the investigated population:
ggplot(data = rs, aes(x = Age)) + 
  geom_bar() 

# In many organizations, ways of work with margins between axes and labels might
# be different. Let's see how we can e.g. remove the margins. Additionally, 
# we will set larger ranges for `x` and `y` axes:
ggplot(data = rs, aes(x = Age)) + 
  geom_bar() +
  scale_y_continuous(expand = c(0,0), limits = c(0, 200)) +
  scale_x_continuous(expand = c(0,0), limits = c(0, 31)) +
  theme_classic()

# To make the plot more colorful, we need to use the `fill` parameter 
# either inside the `aes()` function or outside of it:
ggplot() + 
  geom_bar(data = rs, aes(x = Age, fill = Gender))

ggplot() + 
  geom_bar(data = rs, aes(x = Age), fill = 'skyblue4')

# 3. Editing the plot parameters

# The `position` parameter allows us to change the kind of the plot:
ggplot(data = rs, aes(x = Age, fill = Gender)) +
  geom_bar(position = "dodge")

ggplot(data = rs, aes(x = Age, fill = Gender)) +
  geom_bar(position = "fill")

ggplot(data = rs, aes(x = Age, fill = Gender)) +
  geom_bar(position = "stack")

# The `width` parameter allows to set an optimal bar width:
ggplot(data = rs, aes(x = Age, fill = Gender)) +
  geom_bar(position = "stack", width = 1)

ggplot(data = rs, aes(x = Age, fill = Gender)) +
  geom_bar(position = "stack", width = 0.5)

# The `show.legend` parameter allows to either display or remove the legend. 
# The `FALSE` value hides the leged, while `TRUE` forces the ledend to display:
ggplot(data = rs, aes(x = Age, fill = Gender)) + 
  geom_bar(position = "dodge", width = 1, show.legend = FALSE)

# Sometimes we want to present our data in the aggregated form -- to get averages,
# medians, observation numbers, etc. To do so we have to slightly tweak
# the `geom_bar` function with the `stat` parameter. Assigning to it the `identity`
# value results in the fact that the `geom_bar` function now will not count 
# the observations but will directly visualize values given in the `y` variable.

# But let's analyze an example first. We should slightly transform our dataset 
# and then prep a plot. We transform our data to group all the people according
# to their age and then to calculate mean preferences with respect to doing 
# shopping in large malls.

# Group the data:
rs2 <- rs %>% 
  group_by(Age) %>% 
  summarise(Mean.response = mean(Shopping.centres))
rs2
# Let's plot the average responses in subgroups:
ggplot(data = rs2, aes(x = Age, y = Mean.response)) +
  geom_bar(position = 'stack', width = 0.5, stat = 'identity') +
  labs(title = 'Do you like shopping in large malls?',
       subtitle = '1 - I don\'t like; 5 - I like very much',
       caption = 'Source: based on responses')

# 4. Formatting the plot

# As a reminder, let's look at some different variants of plot formatting:

# Change the fill:
ggplot(data = rs, aes(x = Age)) +
  geom_bar(position = 'dodge', width = 1, color = 'black', fill = 'red') +
  ggtitle('Age distribution in statistical sample') +
  xlab('Age') +
  ylab('Population') +
  theme_minimal()
# Change colors and legend:
ggplot(data = rs, aes(x = Age, fill = factor(Age))) +
  geom_bar(position = 'dodge') +
  ggtitle('Age distribution in statistical sample') +
  xlab('Age') +
  ylab('Population') +
  theme_minimal() +
  theme(legend.position = 'bottom') +
  guides(fill = guide_legend(nrow = 2,byrow = TRUE))
# Color palettes - greens
ggplot(data = rs, aes(x = Age, fill = factor(Age))) +
  geom_bar(position = 'dodge') +
  ggtitle('Age distribution in statistical sample') +
  xlab('Age') +
  ylab('Population') +
  theme_minimal() +
  theme(legend.position = 'bottom')  +
  guides(fill = guide_legend(nrow = 2,byrow = TRUE)) +
  scale_fill_brewer(palette = 'Greens')
# Color palettes - shades of grey:
ggplot(data = rs, aes(x = Age, fill = factor(Age))) +
  geom_bar(position = 'dodge') +
  ggtitle('Age distribution in statistical sample') +
  xlab('Age') +
  ylab('Population') +
  theme_minimal() +
  theme(legend.position = 'bottom')  +
  guides(fill = guide_legend(nrow = 2,byrow = TRUE)) + 
  scale_fill_grey()

# 5. Changing the order of axe labels

# Let's assume that we have a plot from which we want to remove outliers, e.g.:
ggplot(data = rs, aes(x = factor(Number.of.siblings))) +
  geom_bar(position = 'stack', color = 'black') + 
  theme_minimal() +
  ggtitle('Distribution of number of siblings') +
  xlab('Number of siblings') +
  ylab('Population')

# We can remove the outliers by a proper definiton of the `limits` function:
ggplot(data = rs, aes(x = factor(Number.of.siblings))) +
  geom_bar(position = 'stack', color = 'black') + 
  theme_minimal() +
  ggtitle('Distribution of number of siblings') +
  xlab('Number of siblings') +
  ylab('Population')
  scale_x_discrete(limits = c('0','1','2','3'))

# Swap the `x` axis values:
ggplot(data = rs, aes(x = factor(Number.of.siblings))) +
  geom_bar(position = 'stack', color = 'black') +
  theme_minimal() +
  ggtitle('Distribution of number of siblings') +
  xlab('Number of siblings') +
  ylab('Population')
  scale_x_discrete(limits = c('2','1','0'))

# Now lets display the number of siblings vs the frequency of its occurence:
  rs %>% 
    group_by(Number.of.siblings) %>% 
    summarise(N = n()) %>% 
    mutate(Number.of.siblings = factor(Number.of.siblings)) -> result
  
  result$Number.of.siblings2 <- reorder(result$Number.of.siblings, result$N)
  result$Number.of.siblings3 <- reorder(result$Number.of.siblings, desc(result$N))
  
  ggplot(data = result, aes(x = Number.of.siblings2, y = N)) +
    geom_bar(position = 'stack', color = 'black', stat = 'identity') +
    theme_minimal()
  
  ggplot(data = result, aes(x = Number.of.siblings3, y = N)) +
    geom_bar(position = 'stack', color = 'black', stat = 'identity') +
    theme_minimal() 

# 6. Adding labels to geom_bar
  
# As you probably remember, labels can be added with the `geom_text` geometry. 
# The `y` aesthetic and `vjust` parameter can be use to set the height of a label.
# If the `vjust` value is positive, the label will appear below the edge of a bar.
# In other cases, the labels will appear above the edge.
rs3 <- rs %>% 
  group_by(Age) %>% 
  summarise(number = n())

# Labels outside bars:
ggplot(data = rs3, aes(x = Age, y = number)) +
  geom_bar(stat = 'identity', fill = 'darkgreen', color = 'darkgreen') +
  theme_minimal() +
  geom_text(aes(label = number), vjust = -0.5, color = 'red', size = 3.5)

# Labels inside bars:
ggplot(data = rs3, aes(x = Age, y = number)) + 
  geom_bar(stat = 'identity', fill = 'darkgreen', color = 'darkgreen') +
  theme_minimal() +
  geom_text(aes(label = number), vjust = 1.5, color = 'white', size = 3.5)

# A more complicated case is the complex plot, let's remind the example:
rs4 <- rs %>% 
  group_by(Age,Gender) %>% 
  summarise(number = length(Age))

ggplot(data = rs4, aes(x = factor(Age), y = number, fill = factor(Gender))) +
  geom_bar(na.rm = TRUE, position = "dodge", width = 0.5, stat = "identity") +
  ggtitle('Gender and age in the sample') +
  xlab('Age') +
  ylab('Population') +
  labs(fill = 'Gender') +
  theme_minimal()



# To name columns on a plot which has multiple columns near each other, 
# we need to add the `position_dodge()` parameter with  the column `width`
# value to the `geom_text` function. Thanks to that, the labels will be 
# positioned above the appropriate colums:
ggplot(data = rs4, aes(x = factor(Age), y = number, fill = factor(Gender))) +
  geom_bar(na.rm = TRUE, position = "dodge", width = 0.9, stat = 'identity') +
  ggtitle('Gender and age in the sample') +
  xlab('Age') +
  ylab('Population') +
  labs(fill = 'Gender') +
  theme_minimal() +
  geom_text(aes(label = number), position = position_dodge(0.9), vjust = -1, size = 3)

# Yet another challenge is the stacked bar plot:
ggplot(data = rs4, aes(x = factor(Age), y = number, fill = factor(Gender))) +
  geom_bar(na.rm = TRUE, position = "stack", width = 0.5, stat = "identity") +
  ggtitle('Gender and age in the sample') +
  xlab('Age') +
  ylab('Population') +
  labs(fill = 'Gender') +
  theme_minimal() +
  scale_fill_manual(values = c('grey78', 'khaki'))

# To add column labels we need to do two things:
#
#  * set the `position` parameter to the `position_stack` value,
#  * count the cumulated sums to be displayed on the plot.
final <- rs4 %>% 
  arrange(Age, desc(Gender)) %>% 
  group_by(Age) %>% 
  mutate(label_sum = cumsum(number)) 

ggplot(data = final, aes(x = factor(Age), y = number, fill = factor(Gender))) +
  geom_bar(na.rm = TRUE, position = "stack", width = 0.7, stat = "identity") +
  ggtitle('Gender and age in the sample') +
  xlab('Age') +
  ylab('Population') +
  labs(fill = 'Gender') +
  theme_minimal() +
  geom_text(aes(label = label_sum), position = position_stack(),
            vjust = -.5, color = "black", size = 3.5) +
  scale_x_discrete(limits = c('17','18','19','20','21','22','23','24'))

# We could also leave the partial sums and put them in the middle of bars:
final2 <- final %>% 
  mutate(label_sum2 = label_sum*.5)

ggplot(data = final2, aes(x = factor(Age), y = number, fill = factor(Gender))) +
  geom_bar(na.rm = TRUE, position = "stack", width = 0.7, stat = "identity") +
  ggtitle('Gender and age in the sample') +
  xlab('Age') +
  ylab('Population') +
  labs(fill = 'Gender') +
  theme_minimal() +
  geom_label(aes(y = label_sum2, label = number), fill = 'white', position = position_stack(),
            vjust = 0.5, color = "black", size = 3) +
  scale_x_discrete(limits = c('17','18','19','20','21','22','23','24'))


# 7. Horizontal plot

# As a bonus we present a simple trick to flip your barplot:
ggplot(data = rs, aes(x = Age, fill = Gender)) + 
  geom_bar(position = "stack", width = 0.5) +
  coord_flip()

# Problems

# 1. Using data from `happy2015.csv` calculate average happiness scores for each
# region and plot them on a bar plot. Color the bars according to the region and
# hide the legend. Put labels with levels of mean scores above the bars. Add axe titles.

# 2. Using data from `responses.csv` prepare a plot on which you will show the 
# number of people with fear of public speaking. Use colors to present distribution
# of this variable across genders (preferably with stacked bars). Put the plot legend
# on the left hand side of the plot. Change the general plot color to shades of 
# blue and change the default look (theme). Add plot and axis titles, 
# add caption with appropriate x-values description.

# 3. Using the data form `responses.csv` show the respondents' attitude to savings 
# (show as colors) vs the education level. Place the bars next to each other, 
# add labels mirroring the bar height (hint: create a new variable for number of 
# respondents in each group). Change the colors of canvas and fill, as well as
# the theme of the plot. Label the axes, plot and legend.

# Additionally: change the order of column display, change the positioning of 
# columns to 'stacked', and position the labels in the middle of columns.
